{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dongwoo\\\\Desktop\\\\WeatherWhisperer\\\\src\\\\main\\\\fronted\\\\src\\\\MapTest.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport { Map as OlMap, View } from \"ol\";\nimport { defaults as defaultControls } from \"ol/control\";\nimport { fromLonLat, get as getProjection } from \"ol/proj\";\nimport { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\nimport { XYZ, Vector as VectorSource } from \"ol/source\";\nimport \"ol/ol.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MapTest() {\n  _s();\n  // OlMap 타겟 지정을 위해 사용 (id를 지정 대신)\n  const mapContent = useRef(null);\n\n  // 추후 객체를 추가하기 위한 레이어(점, 선, 도형)\n  const initVectorLayer = new VectorLayer({\n    source: new VectorSource()\n  });\n  useEffect(() => {\n    if (!mapContent.current) {\n      return;\n    }\n    const map = new OlMap({\n      controls: defaultControls({\n        zoom: false,\n        rotate: false\n      }).extend([]),\n      layers: [new TileLayer({\n        source: new XYZ({\n          url: \"http://xdworld.vworld.kr:8080/2d/Base/202002/{z}/{x}/{y}.png\"\n        })\n      }), initVectorLayer],\n      view: new View({\n        projection: getProjection(\"EPSG:3857\"),\n        center: fromLonLat([127.296364, 37.503429]),\n        zoom: 15,\n        minZoom: 7,\n        maxZoom: 20\n      }),\n      target: mapContent.current\n    });\n    return () => map.setTarget(undefined);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gis-map-wrap\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(MapTest, \"Q/0VRmroKd4FDgjofcFox2HxbCs=\");\n_c = MapTest;\nvar _c;\n$RefreshReg$(_c, \"MapTest\");","map":{"version":3,"names":["React","useEffect","useRef","Map","OlMap","View","defaults","defaultControls","fromLonLat","get","getProjection","Tile","TileLayer","Vector","VectorLayer","XYZ","VectorSource","jsxDEV","_jsxDEV","MapTest","_s","mapContent","initVectorLayer","source","current","map","controls","zoom","rotate","extend","layers","url","view","projection","center","minZoom","maxZoom","target","setTarget","undefined","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dongwoo/Desktop/WeatherWhisperer/src/main/fronted/src/MapTest.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\n\r\nimport { Map as OlMap, View } from \"ol\";\r\nimport { defaults as defaultControls } from \"ol/control\";\r\nimport { fromLonLat, get as getProjection } from \"ol/proj\";\r\nimport { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\r\nimport { XYZ, Vector as VectorSource } from \"ol/source\";\r\nimport \"ol/ol.css\";\r\n\r\nexport default function MapTest() {\r\n    // OlMap 타겟 지정을 위해 사용 (id를 지정 대신)\r\n    const mapContent = useRef(null);\r\n\r\n    // 추후 객체를 추가하기 위한 레이어(점, 선, 도형)\r\n    const initVectorLayer = new VectorLayer({\r\n        source: new VectorSource(),\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!mapContent.current) {\r\n            return;\r\n        }\r\n\r\n        const map = new OlMap({\r\n            controls: defaultControls({ zoom: false, rotate: false }).extend([]),\r\n            layers: [\r\n                new TileLayer({\r\n                    source: new XYZ({ url: \"http://xdworld.vworld.kr:8080/2d/Base/202002/{z}/{x}/{y}.png\" }),\r\n                }),\r\n                initVectorLayer,\r\n            ],\r\n            view: new View({\r\n                projection: getProjection(\"EPSG:3857\"),\r\n                center: fromLonLat([127.296364, 37.503429]),\r\n                zoom: 15,\r\n                minZoom: 7,\r\n                maxZoom: 20,\r\n            }),\r\n            target: mapContent.current,\r\n        });\r\n\r\n        return () => map.setTarget(undefined);\r\n    }, []);\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"gis-map-wrap\">\r\n            <div ref={mapContent}></div>\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEhD,SAASC,GAAG,IAAIC,KAAK,EAAEC,IAAI,QAAQ,IAAI;AACvC,SAASC,QAAQ,IAAIC,eAAe,QAAQ,YAAY;AACxD,SAASC,UAAU,EAAEC,GAAG,IAAIC,aAAa,QAAQ,SAAS;AAC1D,SAASC,IAAI,IAAIC,SAAS,EAAEC,MAAM,IAAIC,WAAW,QAAQ,UAAU;AACnE,SAASC,GAAG,EAAEF,MAAM,IAAIG,YAAY,QAAQ,WAAW;AACvD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAC9B;EACA,MAAMC,UAAU,GAAGnB,MAAM,CAAC,IAAI,CAAC;;EAE/B;EACA,MAAMoB,eAAe,GAAG,IAAIR,WAAW,CAAC;IACpCS,MAAM,EAAE,IAAIP,YAAY,CAAC;EAC7B,CAAC,CAAC;EAEFf,SAAS,CAAC,MAAM;IACZ,IAAI,CAACoB,UAAU,CAACG,OAAO,EAAE;MACrB;IACJ;IAEA,MAAMC,GAAG,GAAG,IAAIrB,KAAK,CAAC;MAClBsB,QAAQ,EAAEnB,eAAe,CAAC;QAAEoB,IAAI,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAM,CAAC,CAAC,CAACC,MAAM,CAAC,EAAE,CAAC;MACpEC,MAAM,EAAE,CACJ,IAAIlB,SAAS,CAAC;QACVW,MAAM,EAAE,IAAIR,GAAG,CAAC;UAAEgB,GAAG,EAAE;QAA+D,CAAC;MAC3F,CAAC,CAAC,EACFT,eAAe,CAClB;MACDU,IAAI,EAAE,IAAI3B,IAAI,CAAC;QACX4B,UAAU,EAAEvB,aAAa,CAAC,WAAW,CAAC;QACtCwB,MAAM,EAAE1B,UAAU,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC3CmB,IAAI,EAAE,EAAE;QACRQ,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;MACb,CAAC,CAAC;MACFC,MAAM,EAAEhB,UAAU,CAACG;IACvB,CAAC,CAAC;IAEF,OAAO,MAAMC,GAAG,CAACa,SAAS,CAACC,SAAS,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;EAIN,oBACIrB,OAAA;IAAKsB,SAAS,EAAC,cAAc;IAAAC,QAAA,eACzBvB,OAAA;MAAKwB,GAAG,EAAErB;IAAW;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEd;AAAC1B,EAAA,CA1CuBD,OAAO;AAAA4B,EAAA,GAAP5B,OAAO;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
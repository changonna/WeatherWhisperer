{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dongwoo\\\\Desktop\\\\WeatherWhisperer\\\\src\\\\main\\\\fronted\\\\src\\\\MapTest.js\",\n  _s = $RefreshSig$();\n// MapTest.jsx\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Map as OlMap, View } from \"ol\";\nimport { defaults as defaultControls } from \"ol/control\";\nimport { fromLonLat, get as getProjection } from \"ol/proj\";\nimport { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\nimport { XYZ, Vector as VectorSource } from \"ol/source\";\n// +++\nimport { Style, Circle as CircleStyle, Fill, Stroke } from \"ol/style\";\nimport { Draw, Snap, Modify } from \"ol/interaction\";\n// +++\nimport \"ol/ol.css\";\n// 객체가 그려질 레이어(점, 선, 도형)\n// +++ 기존에 컴포넌트 안에 선언했던 initVectorLayer을 밖으로 꺼냄\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initVectorLayer = new VectorLayer({\n  source: new VectorSource(),\n  style: new Style({\n    fill: new Fill({\n      color: \"rgba(0, 0, 0, 0.2)\"\n    }),\n    stroke: new Stroke({\n      color: \"red\",\n      width: 2\n    }),\n    image: new CircleStyle({\n      radius: 7,\n      fill: new Fill({\n        color: \"red\"\n      })\n    })\n  })\n});\n// +++\n\nexport default function MapTest() {\n  _s();\n  // +++\n  const [gisMap, setGisMap] = useState({});\n  const [featuresLayer, setFeaturesLayer] = useState(null);\n  // interaction을 해제하기 위해\n  const [drawSnapObj, setDrawSnapObj] = useState < any > {};\n  // +++\n\n  const mapContent = useRef(null);\n\n  // +++\n  const typeSelect = useRef(null);\n\n  // select 값이 바뀌면 interaction 해제 뒤 addDrawSnap 호출.\n  const onChangeHandler = () => {\n    gisMap.removeInteraction(drawSnapObj.draw);\n    gisMap.removeInteraction(drawSnapObj.snap);\n    addDrawSnap();\n  };\n\n  // 객체 그리기 함수\n  const addDrawSnap = () => {\n    // select 값이 None일 때는 리턴\n    if (typeSelect.current.value === \"None\") {\n      return false;\n    }\n    const draw = new Draw({\n      source: featuresLayer.getSource(),\n      type: typeSelect.current.value\n    });\n    gisMap.addInteraction(draw);\n    const snap = new Snap({\n      source: featuresLayer.getSource()\n    });\n    gisMap.addInteraction(snap);\n\n    // interaction을 해제하기 위해 담아 놓기.\n    setDrawSnapObj({\n      draw,\n      snap\n    });\n  };\n  // +++\n\n  useEffect(() => {\n    if (!mapContent.current) {\n      return;\n    }\n    const map = new OlMap({\n      controls: defaultControls({\n        zoom: false,\n        rotate: false\n      }).extend([]),\n      layers: [new TileLayer({\n        source: new XYZ({\n          url: \"http://xdworld.vworld.kr:8080/2d/Base/202002/{z}/{x}/{y}.png\"\n        })\n      }), initVectorLayer],\n      view: new View({\n        projection: getProjection(\"EPSG:3857\"),\n        center: fromLonLat([127.296364, 37.503429]),\n        zoom: 15,\n        minZoom: 7,\n        maxZoom: 20\n      }),\n      target: mapContent.current\n    });\n\n    // +++ map과 initVectorLayer를 set한다. 추후 다른 함수에 이용. (추가, 수정 등)\n    setGisMap(map);\n    setFeaturesLayer(initVectorLayer);\n    // +++\n\n    return () => map.setTarget(undefined);\n  }, []);\n\n  // +++ gisMap이 있으면 addDrawSnap 호출.\n  useEffect(() => {\n    // gisMap에 map 존재 여부를 객체의 키의 길이로 판단.\n    if (Object.keys(gisMap).length > 0) {\n      addDrawSnap();\n\n      // 그려진 객체 수정.\n      const modify = new Modify({\n        source: initVectorLayer.getSource()\n      });\n      gisMap.addInteraction(modify);\n    }\n    return () => {};\n  }, [addDrawSnap, gisMap, featuresLayer]);\n  // +++\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gis-map-wrap\",\n    children: [/*#__PURE__*/_jsxDEV(\"select\", {\n      ref: typeSelect,\n      defaultValue: \"None\",\n      onChange: () => onChangeHandler(e),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"None\",\n        children: \"\\uC120\\uD0DD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Point\",\n        children: \"\\uC810\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"LineString\",\n        children: \"\\uC120\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Polygon\",\n        children: \"\\uB2E4\\uAC01\\uD615\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"Circle\",\n        children: \"\\uC6D0\\uD615\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 9\n  }, this);\n}\n_s(MapTest, \"2dBPM2Rdx6gy4Cf9ZQSgezd5cZQ=\");\n_c = MapTest;\nvar _c;\n$RefreshReg$(_c, \"MapTest\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Map","OlMap","View","defaults","defaultControls","fromLonLat","get","getProjection","Tile","TileLayer","Vector","VectorLayer","XYZ","VectorSource","Style","Circle","CircleStyle","Fill","Stroke","Draw","Snap","Modify","jsxDEV","_jsxDEV","initVectorLayer","source","style","fill","color","stroke","width","image","radius","MapTest","_s","gisMap","setGisMap","featuresLayer","setFeaturesLayer","drawSnapObj","setDrawSnapObj","any","mapContent","typeSelect","onChangeHandler","removeInteraction","draw","snap","addDrawSnap","current","value","getSource","type","addInteraction","map","controls","zoom","rotate","extend","layers","url","view","projection","center","minZoom","maxZoom","target","setTarget","undefined","Object","keys","length","modify","className","children","ref","defaultValue","onChange","e","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dongwoo/Desktop/WeatherWhisperer/src/main/fronted/src/MapTest.js"],"sourcesContent":["// MapTest.jsx\r\nimport React, { useEffect, useRef,useState } from \"react\";\r\n\r\nimport { Map as OlMap, View } from \"ol\";\r\nimport { defaults as defaultControls } from \"ol/control\";\r\nimport { fromLonLat, get as getProjection } from \"ol/proj\";\r\nimport { Tile as TileLayer, Vector as VectorLayer } from \"ol/layer\";\r\nimport { XYZ, Vector as VectorSource } from \"ol/source\";\r\n// +++\r\nimport { Style, Circle as CircleStyle, Fill, Stroke } from \"ol/style\";\r\nimport { Draw, Snap, Modify } from \"ol/interaction\";\r\n// +++\r\nimport \"ol/ol.css\";\r\n// 객체가 그려질 레이어(점, 선, 도형)\r\n// +++ 기존에 컴포넌트 안에 선언했던 initVectorLayer을 밖으로 꺼냄\r\nconst initVectorLayer = new VectorLayer({\r\n    source: new VectorSource(),\r\n    style: new Style({\r\n        fill: new Fill({\r\n            color: \"rgba(0, 0, 0, 0.2)\",\r\n        }),\r\n        stroke: new Stroke({\r\n            color: \"red\",\r\n            width: 2,\r\n        }),\r\n        image: new CircleStyle({\r\n            radius: 7,\r\n            fill: new Fill({\r\n                color: \"red\",\r\n            }),\r\n        }),\r\n    }),\r\n});\r\n// +++\r\n\r\nexport default function MapTest() {\r\n    // +++\r\n    const [gisMap, setGisMap] = useState({});\r\n    const [featuresLayer, setFeaturesLayer] = useState(null);\r\n    // interaction을 해제하기 위해\r\n    const [drawSnapObj, setDrawSnapObj] = useState<any>({});\r\n    // +++\r\n\r\n    const mapContent = useRef(null);\r\n\r\n    // +++\r\n    const typeSelect = useRef(null);\r\n\r\n    // select 값이 바뀌면 interaction 해제 뒤 addDrawSnap 호출.\r\n    const onChangeHandler = () => {\r\n        gisMap.removeInteraction(drawSnapObj.draw);\r\n        gisMap.removeInteraction(drawSnapObj.snap);\r\n        addDrawSnap();\r\n    };\r\n\r\n    // 객체 그리기 함수\r\n    const addDrawSnap = () => {\r\n        // select 값이 None일 때는 리턴\r\n        if (typeSelect.current.value === \"None\") {\r\n            return false;\r\n        }\r\n\r\n        const draw = new Draw({\r\n            source: featuresLayer.getSource(),\r\n            type: typeSelect.current.value,\r\n        });\r\n        gisMap.addInteraction(draw);\r\n\r\n        const snap = new Snap({ source: featuresLayer.getSource() });\r\n        gisMap.addInteraction(snap);\r\n\r\n        // interaction을 해제하기 위해 담아 놓기.\r\n        setDrawSnapObj({ draw, snap });\r\n    };\r\n    // +++\r\n\r\n    useEffect(() => {\r\n        if (!mapContent.current) {\r\n            return;\r\n        }\r\n\r\n        const map = new OlMap({\r\n            controls: defaultControls({ zoom: false, rotate: false }).extend([]),\r\n            layers: [\r\n                new TileLayer({\r\n                    source: new XYZ({ url: \"http://xdworld.vworld.kr:8080/2d/Base/202002/{z}/{x}/{y}.png\" }),\r\n                }),\r\n                initVectorLayer,\r\n            ],\r\n            view: new View({\r\n                projection: getProjection(\"EPSG:3857\"),\r\n                center: fromLonLat([127.296364, 37.503429]),\r\n                zoom: 15,\r\n                minZoom: 7,\r\n                maxZoom: 20,\r\n            }),\r\n            target: mapContent.current,\r\n        });\r\n\r\n        // +++ map과 initVectorLayer를 set한다. 추후 다른 함수에 이용. (추가, 수정 등)\r\n        setGisMap(map);\r\n        setFeaturesLayer(initVectorLayer);\r\n        // +++\r\n\r\n        return () => map.setTarget(undefined);\r\n    }, []);\r\n\r\n    // +++ gisMap이 있으면 addDrawSnap 호출.\r\n    useEffect(() => {\r\n        // gisMap에 map 존재 여부를 객체의 키의 길이로 판단.\r\n        if (Object.keys(gisMap).length > 0) {\r\n            addDrawSnap();\r\n\r\n            // 그려진 객체 수정.\r\n            const modify = new Modify({ source: initVectorLayer.getSource() });\r\n            gisMap.addInteraction(modify);\r\n        }\r\n\r\n        return () => {};\r\n    }, [addDrawSnap, gisMap, featuresLayer]);\r\n    // +++\r\n\r\n\r\n    return (\r\n        <div className=\"gis-map-wrap\">\r\n            {/* +++ 객체 타입 선택 */}\r\n            <select ref={typeSelect} defaultValue=\"None\" onChange={() => onChangeHandler(e)}>\r\n                <option value=\"None\">선택</option>\r\n                <option value=\"Point\">점</option>\r\n                <option value=\"LineString\">선</option>\r\n                <option value=\"Polygon\">다각형</option>\r\n                <option value=\"Circle\">원형</option>\r\n            </select>\r\n            {/* +++ */}\r\n            <div ref={mapContent}></div>\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAACC,QAAQ,QAAQ,OAAO;AAEzD,SAASC,GAAG,IAAIC,KAAK,EAAEC,IAAI,QAAQ,IAAI;AACvC,SAASC,QAAQ,IAAIC,eAAe,QAAQ,YAAY;AACxD,SAASC,UAAU,EAAEC,GAAG,IAAIC,aAAa,QAAQ,SAAS;AAC1D,SAASC,IAAI,IAAIC,SAAS,EAAEC,MAAM,IAAIC,WAAW,QAAQ,UAAU;AACnE,SAASC,GAAG,EAAEF,MAAM,IAAIG,YAAY,QAAQ,WAAW;AACvD;AACA,SAASC,KAAK,EAAEC,MAAM,IAAIC,WAAW,EAAEC,IAAI,EAAEC,MAAM,QAAQ,UAAU;AACrE,SAASC,IAAI,EAAEC,IAAI,EAAEC,MAAM,QAAQ,gBAAgB;AACnD;AACA,OAAO,WAAW;AAClB;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAG,IAAIb,WAAW,CAAC;EACpCc,MAAM,EAAE,IAAIZ,YAAY,CAAC,CAAC;EAC1Ba,KAAK,EAAE,IAAIZ,KAAK,CAAC;IACba,IAAI,EAAE,IAAIV,IAAI,CAAC;MACXW,KAAK,EAAE;IACX,CAAC,CAAC;IACFC,MAAM,EAAE,IAAIX,MAAM,CAAC;MACfU,KAAK,EAAE,KAAK;MACZE,KAAK,EAAE;IACX,CAAC,CAAC;IACFC,KAAK,EAAE,IAAIf,WAAW,CAAC;MACnBgB,MAAM,EAAE,CAAC;MACTL,IAAI,EAAE,IAAIV,IAAI,CAAC;QACXW,KAAK,EAAE;MACX,CAAC;IACL,CAAC;EACL,CAAC;AACL,CAAC,CAAC;AACF;;AAEA,eAAe,SAASK,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAC9B;EACA,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGrC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxC,MAAM,CAACsC,aAAa,EAAEC,gBAAgB,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;EACxD;EACA,MAAM,CAACwC,WAAW,EAAEC,cAAc,CAAC,GAAGzC,QAAQ,GAAC0C,GAAG,GAAE,CAAC,CAAE;EACvD;;EAEA,MAAMC,UAAU,GAAG5C,MAAM,CAAC,IAAI,CAAC;;EAE/B;EACA,MAAM6C,UAAU,GAAG7C,MAAM,CAAC,IAAI,CAAC;;EAE/B;EACA,MAAM8C,eAAe,GAAGA,CAAA,KAAM;IAC1BT,MAAM,CAACU,iBAAiB,CAACN,WAAW,CAACO,IAAI,CAAC;IAC1CX,MAAM,CAACU,iBAAiB,CAACN,WAAW,CAACQ,IAAI,CAAC;IAC1CC,WAAW,CAAC,CAAC;EACjB,CAAC;;EAED;EACA,MAAMA,WAAW,GAAGA,CAAA,KAAM;IACtB;IACA,IAAIL,UAAU,CAACM,OAAO,CAACC,KAAK,KAAK,MAAM,EAAE;MACrC,OAAO,KAAK;IAChB;IAEA,MAAMJ,IAAI,GAAG,IAAI3B,IAAI,CAAC;MAClBM,MAAM,EAAEY,aAAa,CAACc,SAAS,CAAC,CAAC;MACjCC,IAAI,EAAET,UAAU,CAACM,OAAO,CAACC;IAC7B,CAAC,CAAC;IACFf,MAAM,CAACkB,cAAc,CAACP,IAAI,CAAC;IAE3B,MAAMC,IAAI,GAAG,IAAI3B,IAAI,CAAC;MAAEK,MAAM,EAAEY,aAAa,CAACc,SAAS,CAAC;IAAE,CAAC,CAAC;IAC5DhB,MAAM,CAACkB,cAAc,CAACN,IAAI,CAAC;;IAE3B;IACAP,cAAc,CAAC;MAAEM,IAAI;MAAEC;IAAK,CAAC,CAAC;EAClC,CAAC;EACD;;EAEAlD,SAAS,CAAC,MAAM;IACZ,IAAI,CAAC6C,UAAU,CAACO,OAAO,EAAE;MACrB;IACJ;IAEA,MAAMK,GAAG,GAAG,IAAIrD,KAAK,CAAC;MAClBsD,QAAQ,EAAEnD,eAAe,CAAC;QAAEoD,IAAI,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAM,CAAC,CAAC,CAACC,MAAM,CAAC,EAAE,CAAC;MACpEC,MAAM,EAAE,CACJ,IAAIlD,SAAS,CAAC;QACVgB,MAAM,EAAE,IAAIb,GAAG,CAAC;UAAEgD,GAAG,EAAE;QAA+D,CAAC;MAC3F,CAAC,CAAC,EACFpC,eAAe,CAClB;MACDqC,IAAI,EAAE,IAAI3D,IAAI,CAAC;QACX4D,UAAU,EAAEvD,aAAa,CAAC,WAAW,CAAC;QACtCwD,MAAM,EAAE1D,UAAU,CAAC,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;QAC3CmD,IAAI,EAAE,EAAE;QACRQ,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;MACb,CAAC,CAAC;MACFC,MAAM,EAAExB,UAAU,CAACO;IACvB,CAAC,CAAC;;IAEF;IACAb,SAAS,CAACkB,GAAG,CAAC;IACdhB,gBAAgB,CAACd,eAAe,CAAC;IACjC;;IAEA,OAAO,MAAM8B,GAAG,CAACa,SAAS,CAACC,SAAS,CAAC;EACzC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAvE,SAAS,CAAC,MAAM;IACZ;IACA,IAAIwE,MAAM,CAACC,IAAI,CAACnC,MAAM,CAAC,CAACoC,MAAM,GAAG,CAAC,EAAE;MAChCvB,WAAW,CAAC,CAAC;;MAEb;MACA,MAAMwB,MAAM,GAAG,IAAInD,MAAM,CAAC;QAAEI,MAAM,EAAED,eAAe,CAAC2B,SAAS,CAAC;MAAE,CAAC,CAAC;MAClEhB,MAAM,CAACkB,cAAc,CAACmB,MAAM,CAAC;IACjC;IAEA,OAAO,MAAM,CAAC,CAAC;EACnB,CAAC,EAAE,CAACxB,WAAW,EAAEb,MAAM,EAAEE,aAAa,CAAC,CAAC;EACxC;;EAGA,oBACId,OAAA;IAAKkD,SAAS,EAAC,cAAc;IAAAC,QAAA,gBAEzBnD,OAAA;MAAQoD,GAAG,EAAEhC,UAAW;MAACiC,YAAY,EAAC,MAAM;MAACC,QAAQ,EAAEA,CAAA,KAAMjC,eAAe,CAACkC,CAAC,CAAE;MAAAJ,QAAA,gBAC5EnD,OAAA;QAAQ2B,KAAK,EAAC,MAAM;QAAAwB,QAAA,EAAC;MAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAChC3D,OAAA;QAAQ2B,KAAK,EAAC,OAAO;QAAAwB,QAAA,EAAC;MAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAChC3D,OAAA;QAAQ2B,KAAK,EAAC,YAAY;QAAAwB,QAAA,EAAC;MAAC;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACrC3D,OAAA;QAAQ2B,KAAK,EAAC,SAAS;QAAAwB,QAAA,EAAC;MAAG;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACpC3D,OAAA;QAAQ2B,KAAK,EAAC,QAAQ;QAAAwB,QAAA,EAAC;MAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9B,CAAC,eAET3D,OAAA;MAAKoD,GAAG,EAAEjC;IAAW;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAEd;AAAChD,EAAA,CAtGuBD,OAAO;AAAAkD,EAAA,GAAPlD,OAAO;AAAA,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}